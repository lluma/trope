{"version":3,"sources":["Component/AnnoPaper.js","Component/CorpusList.js","App.js","serviceWorker.js","index.js"],"names":["data","result","handleClosePaperFunc","handleSaveResultFunc","inputRef","useRef","useState","title","annotations","tempResult","setTempResult","useEffect","id","onClick","e","preventDefault","target","idx","sentences","map","sent","sent_idx","className","key","tropeOptions","trope","trope_idx","opt","opt_idx","selected_style","option","backgroundColor","style","newAnnotations","handleChooseTropeOption","ref","placeholder","onKeyDown","console","log","current","value","handleEnterEvidence","setData","Object","keys","Corpus","reduce","res","cur","error","setResult","annoPaperDisplay","setAnnoPaperDisplay","Fragment","title_idx","newData","handleChooseCorpus","line","Tropes","length","type","onChange","fileReader","FileReader","readAsText","files","onload","JSON","parse","content","fileName","contentType","a","json","stringify","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","saveResult","newResult","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.00b82a63.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport '../Css/AnnoPaper.css';\n\nexport default ({ data, result, handleClosePaperFunc, handleSaveResultFunc }) => {\n\n    // console.log(data);\n    // console.log(result);\n    const inputRef = useRef(null);\n    const [ tempResult, setTempResult ] = useState(() => ({\n            title: 'Default',\n            annotations: {}\n    }));\n\n    const handleChooseTropeOption = (e, trope, opt) => {\n\n        let newAnnotations = { ...tempResult.annotations };\n        newAnnotations[trope] = { trope: trope, option: opt };\n        setTempResult(tempResult => ({\n            ...tempResult,\n            annotations: newAnnotations\n        }));\n    }\n\n    const handleEnterEvidence = (e, trope) => {\n        if (e.key === 'Enter') {\n            console.log(inputRef.current.value);\n        }\n    }\n    \n    useEffect(() => {\n        setTempResult(result);\n    }, [result])\n\n    return (\n        <div id=\"anno_paper\"\n            onClick={(e) => {\n                e.preventDefault();\n                if (e.target.id === 'anno_paper') {\n                    handleClosePaperFunc(e);\n                    handleSaveResultFunc(tempResult);\n                }\n            }}\n        >\n            <div \n                id=\"paper_container\"\n                \n            >\n                <div id=\"paper_container_row1\">\n                    <p id=\"paper_container_row1_title\">{`${data.idx}. ${data.title}`}</p>\n                </div>\n                <div id=\"paper_container_row2\">\n                    <div id=\"paper_container_row2_corpus_content\">\n                        {data.sentences.map((sent, sent_idx) => (\n                            <div \n                                className=\"paper_container_row2_corpus_sentence_box\"\n                                key={sent_idx+1}\n                            >\n                                <div className=\"paper_container_row2_corpus_sentence_index\">{sent_idx+1}</div>\n                                <div className=\"paper_container_row2_corpus_sentence\">{sent}</div>\n                            </div>\n                        ))}\n                    </div>\n                    <div id=\"paper_container_row2_trope_group\">\n                        {data.tropeOptions.map((trope, trope_idx) => (\n                            <div \n                                className=\"paper_container_row2_trope_box\"\n                                key={trope_idx}\n                                \n                            >\n                                <div className=\"paper_container_row2_trope_title\">\n                                    {trope}\n                                </div>\n                                <div className=\"paper_container_row2_trope_option_group\">\n                                    {['Match', 'Similar', 'None'].map((opt, opt_idx) => {\n                                        let selected_style = (trope in tempResult.annotations && tempResult.annotations[trope].option === opt)? \n                                            { backgroundColor: 'green' }:{};\n                                        return (\n                                            <div \n                                                className=\"paper_container_row2_trope_option\"\n                                                key={opt_idx}\n                                                style={selected_style}\n                                                onClick={(e) => handleChooseTropeOption(e, trope, opt)}\n                                            >\n                                                {opt}\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                                <div className=\"paper_container_row2_trope_evidence_group\">\n                                    {trope in tempResult.annotations && (tempResult.annotations[trope].option === \"Match\" || tempResult.annotations[trope].option === \"Similar\")\n                                    && <input \n                                        ref={inputRef}\n                                        className=\"paper_container_row2_trope_evidence_input\"\n                                        placeholder=\"index\"\n                                        onKeyDown={(e) => handleEnterEvidence(e, trope)}\n                                    />}\n                                    \n                                    <div></div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n\n            \n        </div>\n    );\n}","import React, { useState } from 'react';\nimport Corpus from '../Data/plots4amt.json';\nimport Tropes from '../Data/tropes4amt.json';\nimport AnnoPaper from './AnnoPaper';\nimport '../Css/CorpusList.css';\n\n// console.log(Corpus);\n// console.log(Tropes);\n\nexport default () => {\n\n    const [ data, setData ] = useState(() => {\n        return {\n            title: 'Default',\n            idx: 1,\n            sentences: ['xxxxx','xxxxxxx', 'xxxxxxxxxxxx'],\n            tropeOptions: ['oooo','ooooooo','ooo']\n        };\n    });\n    const [ result, setResult ] = useState(() => Object.keys(Corpus).reduce((res, cur) => {\n        if (cur in res) console.error('Same key error occurred in Corpus! [' + cur + ']');\n        else res[cur] = { \n                title: cur, \n                annotations: {}\n                // annotations:  Tropes[cur].reduce((ta, tr) => {\n                //     if (tr in ta) console.error('Same key error occurred in Tropes! [' + tr + ']');\n                //     else ta[tr] = { trope: tr, option: '', evidence: [] };\n                //     return ta;\n                // }, {})\n            };\n        return res;\n    }, {}));\n    const [ annoPaperDisplay, setAnnoPaperDisplay ] = useState(false);\n\n    const handleChooseCorpus = (e, newData) => {\n        e.preventDefault();\n        setData(newData);\n        setAnnoPaperDisplay(true);\n    }\n\n    const handleClosePaper = (e) => {\n        setAnnoPaperDisplay(false);\n    }\n\n    const handleSaveResult = (saveResult) => {\n        let { title, annotations } = saveResult;\n        let newResult = { ...result };\n        newResult[title].annotations = {\n            ...newResult[title].annotations,\n            ...annotations\n        };\n        // console.log(saveResult);\n        // console.log(newResult);\n        setResult(newResult);\n    }\n\n    const handleSave2File = () => {\n\n        async function download(content, fileName, contentType) {\n            \n            const json = JSON.stringify(content);\n            const blob = new Blob([json],{type: contentType});\n            const href = await URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = href;\n            link.download = fileName + \".json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n        download(result, 'test', 'application/json');\n    }\n\n    const handleLoadFromFile = (e) => {\n\n        const fileReader = new FileReader();\n        fileReader.readAsText(e.target.files[0], \"UTF-8\");\n        fileReader.onload = e => {\n            setResult(JSON.parse(e.target.result));\n        };\n    }\n\n    return (\n        <React.Fragment>\n            <div id=\"corpus_list\">\n                <div id=\"corpus_list_title\">Trope Annotation</div>\n                <div id=\"corpus_list_content\">\n                    {Object.keys(Corpus).map((title, title_idx) => (\n                        <div \n                            className=\"corpus_list_item\" \n                            key={title_idx+1}\n                            onClick={(e) => handleChooseCorpus(e, {\n                                title: title,\n                                idx: title_idx + 1,\n                                sentences: Object.keys(Corpus[title]).map((line) => Corpus[title][line]),\n                                tropeOptions: Tropes[title]\n                            })}\n                        >\n                            <span className=\"corpus_list_item_title\"><p>{`${title_idx+1}. ${title}`}</p></span>\n                            <span className=\"corpus_list_item_status\">\n                                {Object.keys(result[title].annotations).length}/{Tropes[title].length}\n                            </span>\n                        </div>\n                    ))}\n                </div>\n                <div id=\"btn_group\">\n                    <div id=\"load_btn\">\n                        <input type=\"file\" onChange={handleLoadFromFile} />\n                    </div>\n                    <div id=\"save_btn\" onClick={handleSave2File}><p>Save</p></div>\n                </div>\n            </div>\n            {annoPaperDisplay \n                && <AnnoPaper \n                    data={data}\n                    result={result[data.title]}\n                    handleClosePaperFunc={handleClosePaper}\n                    handleSaveResultFunc={handleSaveResult}\n                />\n            }\n            \n        </React.Fragment>\n    );\n}","import React from 'react';\nimport './App.css';\nimport CorpusList from './Component/CorpusList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CorpusList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}